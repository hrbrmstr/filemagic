// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// incant_
DataFrame incant_(CharacterVector path, std::string magic_db);
RcppExport SEXP _wand_incant_(SEXP pathSEXP, SEXP magic_dbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type magic_db(magic_dbSEXP);
    rcpp_result_gen = Rcpp::wrap(incant_(path, magic_db));
    return rcpp_result_gen;
END_RCPP
}
// lib_version
int lib_version();
RcppExport SEXP _wand_lib_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(lib_version());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wand_incant_", (DL_FUNC) &_wand_incant_, 2},
    {"_wand_lib_version", (DL_FUNC) &_wand_lib_version, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_wand(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
